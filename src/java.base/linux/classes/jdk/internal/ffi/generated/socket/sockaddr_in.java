/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// Generated by jextract

package jdk.internal.ffi.generated.socket;

import jdk.internal.ffi.generated.BindingUtils;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sockaddr_in {
 *     sa_family_t sin_family;
 *     in_port_t sin_port;
 *     struct in_addr sin_addr;
 *     unsigned char sin_zero[8];
 * }
 * }
 */
@SuppressWarnings("restricted")
public final class sockaddr_in {

    private sockaddr_in() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        BindingUtils.C_SHORT.withName("sin_family"),
        BindingUtils.C_SHORT.withName("sin_port"),
        in_addr.layout().withName("sin_addr"),
        MemoryLayout.sequenceLayout(8, BindingUtils.C_CHAR).withName("sin_zero")
    ).withName("sockaddr_in");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort sin_family$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sin_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sa_family_t sin_family
     * }
     */
    public static final OfShort sin_family$layout() {
        return sin_family$LAYOUT;
    }

    private static final long sin_family$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sa_family_t sin_family
     * }
     */
    public static final long sin_family$offset() {
        return sin_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sa_family_t sin_family
     * }
     */
    public static short sin_family(MemorySegment struct) {
        return struct.get(sin_family$LAYOUT, sin_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sa_family_t sin_family
     * }
     */
    public static void sin_family(MemorySegment struct, int fieldValue) {
        // jextract generated code was modified to take family as int
        // on all platforms, and added the cast to - short or byte,
        // depending on a platform native structure.
        struct.set(sin_family$LAYOUT, sin_family$OFFSET, (short) fieldValue);
    }

    private static final OfShort sin_port$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sin_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * in_port_t sin_port
     * }
     */
    public static final OfShort sin_port$layout() {
        return sin_port$LAYOUT;
    }

    private static final long sin_port$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * in_port_t sin_port
     * }
     */
    public static final long sin_port$offset() {
        return sin_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * in_port_t sin_port
     * }
     */
    public static short sin_port(MemorySegment struct) {
        return struct.get(sin_port$LAYOUT, sin_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * in_port_t sin_port
     * }
     */
    public static void sin_port(MemorySegment struct, short fieldValue) {
        struct.set(sin_port$LAYOUT, sin_port$OFFSET, fieldValue);
    }

    private static final GroupLayout sin_addr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sin_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct in_addr sin_addr
     * }
     */
    public static final GroupLayout sin_addr$layout() {
        return sin_addr$LAYOUT;
    }

    private static final long sin_addr$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct in_addr sin_addr
     * }
     */
    public static final long sin_addr$offset() {
        return sin_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct in_addr sin_addr
     * }
     */
    public static MemorySegment sin_addr(MemorySegment struct) {
        return struct.asSlice(sin_addr$OFFSET, sin_addr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct in_addr sin_addr
     * }
     */
    public static void sin_addr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sin_addr$OFFSET, sin_addr$LAYOUT.byteSize());
    }

    private static final SequenceLayout sin_zero$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sin_zero"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static final SequenceLayout sin_zero$layout() {
        return sin_zero$LAYOUT;
    }

    private static final long sin_zero$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static final long sin_zero$offset() {
        return sin_zero$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static MemorySegment sin_zero(MemorySegment struct) {
        return struct.asSlice(sin_zero$OFFSET, sin_zero$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static void sin_zero(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sin_zero$OFFSET, sin_zero$LAYOUT.byteSize());
    }

    private static long[] sin_zero$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static long[] sin_zero$dimensions() {
        return sin_zero$DIMS;
    }
    private static final VarHandle sin_zero$ELEM_HANDLE = sin_zero$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static byte sin_zero(MemorySegment struct, long index0) {
        return (byte)sin_zero$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char sin_zero[8]
     * }
     */
    public static void sin_zero(MemorySegment struct, long index0, byte fieldValue) {
        sin_zero$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

