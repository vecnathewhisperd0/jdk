/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// Generated by jextract

package jdk.internal.ffi.generated.socket;

import jdk.internal.ffi.generated.BindingUtils;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct in6_addr {
 *     union {
 *         UCHAR Byte[16];
 *         USHORT Word[8];
 *     } u;
 * }
 * }
 */

@SuppressWarnings("restricted")
public final class in6_addr {

    private in6_addr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        in6_addr.u.layout().withName("u")
    ).withName("in6_addr");

    /**
     * The layout of this stS_addrruct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     UCHAR Byte[16];
     *     USHORT Word[8];
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(16, BindingUtils.C_CHAR).withName("Byte"),
            MemoryLayout.sequenceLayout(8, BindingUtils.C_SHORT).withName("Word")
        ).withName("$anon$26:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final SequenceLayout Byte$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Byte"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static final SequenceLayout Byte$layout() {
            return Byte$LAYOUT;
        }

        private static final long Byte$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static final long Byte$offset() {
            return Byte$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static MemorySegment Byte(MemorySegment union) {
            return union.asSlice(Byte$OFFSET, Byte$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static void Byte(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, Byte$OFFSET, Byte$LAYOUT.byteSize());
        }

        private static long[] Byte$DIMS = { 16 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static long[] Byte$dimensions() {
            return Byte$DIMS;
        }
        private static final VarHandle Byte$ELEM_HANDLE = Byte$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static byte Byte(MemorySegment union, long index0) {
            return (byte)Byte$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * UCHAR Byte[16]
         * }
         */
        public static void Byte(MemorySegment union, long index0, byte fieldValue) {
            Byte$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final SequenceLayout Word$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Word"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static final SequenceLayout Word$layout() {
            return Word$LAYOUT;
        }

        private static final long Word$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static final long Word$offset() {
            return Word$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static MemorySegment Word(MemorySegment union) {
            return union.asSlice(Word$OFFSET, Word$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static void Word(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, Word$OFFSET, Word$LAYOUT.byteSize());
        }

        private static long[] Word$DIMS = { 8 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static long[] Word$dimensions() {
            return Word$DIMS;
        }
        private static final VarHandle Word$ELEM_HANDLE = Word$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static short Word(MemorySegment union, long index0) {
            return (short)Word$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * USHORT Word[8]
         * }
         */
        public static void Word(MemorySegment union, long index0, short fieldValue) {
            Word$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     UCHAR Byte[16];
     *     USHORT Word[8];
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     UCHAR Byte[16];
     *     USHORT Word[8];
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     UCHAR Byte[16];
     *     USHORT Word[8];
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     UCHAR Byte[16];
     *     USHORT Word[8];
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

